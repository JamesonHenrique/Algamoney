/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { buscarPeloCodigo2 } from '../fn/categoria-resource/buscar-pelo-codigo-2';
import { BuscarPeloCodigo2$Params } from '../fn/categoria-resource/buscar-pelo-codigo-2';
import { Categoria } from '../models/categoria';
import { criar2 } from '../fn/categoria-resource/criar-2';
import { Criar2$Params } from '../fn/categoria-resource/criar-2';
import { listar } from '../fn/categoria-resource/listar';
import { Listar$Params } from '../fn/categoria-resource/listar';

@Injectable({ providedIn: 'root' })
export class CategoriaResourceService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `listar()` */
  static readonly ListarPath = '/categorias';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listar()` instead.
   *
   * This method doesn't expect any request body.
   */
  listar$Response(params?: Listar$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Categoria>>> {
    return listar(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listar$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listar(params?: Listar$Params, context?: HttpContext): Observable<Array<Categoria>> {
    return this.listar$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Categoria>>): Array<Categoria> => r.body)
    );
  }

  /** Path part for operation `criar2()` */
  static readonly Criar2Path = '/categorias';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `criar2()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  criar2$Response(params: Criar2$Params, context?: HttpContext): Observable<StrictHttpResponse<Categoria>> {
    return criar2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `criar2$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  criar2(params: Criar2$Params, context?: HttpContext): Observable<Categoria> {
    return this.criar2$Response(params, context).pipe(
      map((r: StrictHttpResponse<Categoria>): Categoria => r.body)
    );
  }

  /** Path part for operation `buscarPeloCodigo2()` */
  static readonly BuscarPeloCodigo2Path = '/categorias/{codigo}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `buscarPeloCodigo2()` instead.
   *
   * This method doesn't expect any request body.
   */
  buscarPeloCodigo2$Response(params: BuscarPeloCodigo2$Params, context?: HttpContext): Observable<StrictHttpResponse<Categoria>> {
    return buscarPeloCodigo2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `buscarPeloCodigo2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  buscarPeloCodigo2(params: BuscarPeloCodigo2$Params, context?: HttpContext): Observable<Categoria> {
    return this.buscarPeloCodigo2$Response(params, context).pipe(
      map((r: StrictHttpResponse<Categoria>): Categoria => r.body)
    );
  }

}
