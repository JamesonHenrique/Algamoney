/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { atualizar } from '../fn/pessoa-resource/atualizar';
import { Atualizar$Params } from '../fn/pessoa-resource/atualizar';
import { atualizarPropriedadeAtivo } from '../fn/pessoa-resource/atualizar-propriedade-ativo';
import { AtualizarPropriedadeAtivo$Params } from '../fn/pessoa-resource/atualizar-propriedade-ativo';
import { buscarPeloCodigo } from '../fn/pessoa-resource/buscar-pelo-codigo';
import { BuscarPeloCodigo$Params } from '../fn/pessoa-resource/buscar-pelo-codigo';
import { criar } from '../fn/pessoa-resource/criar';
import { Criar$Params } from '../fn/pessoa-resource/criar';
import { PageResponsePessoaResponseDto } from '../models/page-response-pessoa-response-dto';
import { pesquisar } from '../fn/pessoa-resource/pesquisar';
import { Pesquisar$Params } from '../fn/pessoa-resource/pesquisar';
import { PessoaResponseDto } from '../models/pessoa-response-dto';
import { remover } from '../fn/pessoa-resource/remover';
import { Remover$Params } from '../fn/pessoa-resource/remover';

@Injectable({ providedIn: 'root' })
export class PessoaResourceService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `buscarPeloCodigo()` */
  static readonly BuscarPeloCodigoPath = '/pessoas/{codigo}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `buscarPeloCodigo()` instead.
   *
   * This method doesn't expect any request body.
   */
  buscarPeloCodigo$Response(params: BuscarPeloCodigo$Params, context?: HttpContext): Observable<StrictHttpResponse<PessoaResponseDto>> {
    return buscarPeloCodigo(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `buscarPeloCodigo$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  buscarPeloCodigo(params: BuscarPeloCodigo$Params, context?: HttpContext): Observable<PessoaResponseDto> {
    return this.buscarPeloCodigo$Response(params, context).pipe(
      map((r: StrictHttpResponse<PessoaResponseDto>): PessoaResponseDto => r.body)
    );
  }

  /** Path part for operation `atualizar()` */
  static readonly AtualizarPath = '/pessoas/{codigo}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `atualizar()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  atualizar$Response(params: Atualizar$Params, context?: HttpContext): Observable<StrictHttpResponse<PessoaResponseDto>> {
    return atualizar(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `atualizar$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  atualizar(params: Atualizar$Params, context?: HttpContext): Observable<PessoaResponseDto> {
    return this.atualizar$Response(params, context).pipe(
      map((r: StrictHttpResponse<PessoaResponseDto>): PessoaResponseDto => r.body)
    );
  }

  /** Path part for operation `remover()` */
  static readonly RemoverPath = '/pessoas/{codigo}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `remover()` instead.
   *
   * This method doesn't expect any request body.
   */
  remover$Response(params: Remover$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return remover(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `remover$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  remover(params: Remover$Params, context?: HttpContext): Observable<void> {
    return this.remover$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `atualizarPropriedadeAtivo()` */
  static readonly AtualizarPropriedadeAtivoPath = '/pessoas/{codigo}/ativo';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `atualizarPropriedadeAtivo()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  atualizarPropriedadeAtivo$Response(params: AtualizarPropriedadeAtivo$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return atualizarPropriedadeAtivo(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `atualizarPropriedadeAtivo$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  atualizarPropriedadeAtivo(params: AtualizarPropriedadeAtivo$Params, context?: HttpContext): Observable<void> {
    return this.atualizarPropriedadeAtivo$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `pesquisar()` */
  static readonly PesquisarPath = '/pessoas';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `pesquisar()` instead.
   *
   * This method doesn't expect any request body.
   */
  pesquisar$Response(params?: Pesquisar$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePessoaResponseDto>> {
    return pesquisar(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `pesquisar$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  pesquisar(params?: Pesquisar$Params, context?: HttpContext): Observable<PageResponsePessoaResponseDto> {
    return this.pesquisar$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePessoaResponseDto>): PageResponsePessoaResponseDto => r.body)
    );
  }

  /** Path part for operation `criar()` */
  static readonly CriarPath = '/pessoas';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `criar()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  criar$Response(params: Criar$Params, context?: HttpContext): Observable<StrictHttpResponse<PessoaResponseDto>> {
    return criar(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `criar$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  criar(params: Criar$Params, context?: HttpContext): Observable<PessoaResponseDto> {
    return this.criar$Response(params, context).pipe(
      map((r: StrictHttpResponse<PessoaResponseDto>): PessoaResponseDto => r.body)
    );
  }

}
